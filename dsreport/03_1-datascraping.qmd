# 3.1 Data Scraping

In order to explore the Data Science degrees around Australia Universities, we compiled a list of Schools and the Data Science and related degrees they offered. Universities' websites is scraped using R.

To start off the project, Professor Tanaka provided sample code for data scraping using Monash Handbook as example. Libraries `rvest` and `rSelenium` are two of the main tools. Initially, we studied her code and then tried to replicate her code to be applied to other university's websites.

The flow of the data scrapping is as follow:

1.  Identify the main page (url) where the degree information is contained.
2.  Use functions from `rvest` to retrieve all the course unit code (or course unit url). Retreive the degree code and formal degree name and save it for later.
3.  Use `rSelenium` functions and course unit information, to direct R to the unit information page.
4.  Retrieve the following information from the page using `rvest` functions:
    -   Unit Code

    -   Unit Name

    -   Unit Overview

    -   Unit Learning Outcome

    -   Unit Prohibition/ Pre-requisite/ Co-requisite
5.  Repeat step 3 & 4 until all the course information has been retrieved.
6.  Compile all the retrieved data from the University into a dataframe and export it as csv file.

Despite the process being similar for each University, we soon realize the process was going to be more challenging than expect.

## 3.1.1 Inconsistent Information

Monash University's student handbook on Degrees and Courses is a spectacular website for data scraping. Its html code is clearly labeled and anything you need to know about the degree/ course can be found on the website. The same cannot be said about other Universities.

\*\* Rachel can talk about the missing learning outcomes

## 3.1.2 Difficult to Manage Websites

Each university website is unique. Sometimes the information is not so straightforward. An example of this is University of Adelaide. The main website for the degree does contain the list of units that go into the degree.

However, instead of having just one page with all the unit information, the link takes you to a page with different unit information depending on when the unit is offered and on what campus.

I tried bypassing the pages by directly looking at the url of the final unit information page I want to be on. Unfortunately, the url is not designed or structured in a way which I am able to predict the url based on my unit code. With that said, my only option was to code the function to jump from pages to pages before landing on the right unit information page.
